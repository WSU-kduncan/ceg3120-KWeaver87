AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates 3 instances and 1 VPC.  Each instance gets a private IP and is pre-installed with required software.  Each instance also has a public / elastic IP because we can't create NAT gateways...
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # This SSHLocation could go.
  SSHLocation:
    Description: "The CIDR address range that can be used to SSH to the EC2 instance"
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RepoUrl:
    Description: "URL to the raw Project5 folder of repo"
    Type: String
    Default: "https://raw.githubusercontent.com/WSU-kduncan/ceg3120-KWeaver87/Project5/Project5"
Mappings:
  AWSInstanceType2Arch: # Supported architectures (x64bit only)
    t2.micro:
      Arch: HVM64
  AWSRegionUbuntu: # AMI for Ubuntu server in each supported region
    us-east-1: # N. Virginia
      PV64: NOT_SUPPORTED
      HVM64: ami-09e67e426f25ce0d7 # AMI ID for Ubuntu 20 - Amazon Linux 2 AMI ami-02e136e904f3da870
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: CEG2350 Project5 VPC
        - Key: Application
          Value: !Ref "AWS::StackId"
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/28
      Tags:
        - Key: Name
          Value: Subnet
        - Key: Application
          Value: !Ref "AWS::StackId"
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref "AWS::StackId"
  Route:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  # This is the order to get an EIP and attach to instance defined
  #   by PublicUbuntuInstance
  PublicIPAddress:
    Type: "AWS::EC2::EIP"
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref PublicInstance
  PublicSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access, HTTP access, and open all insternal ports.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 130.108.0.0/16 # WSU CIDR
        # SSH port forward for httpd-* instances
        - IpProtocol: tcp
          FromPort: "2201"
          ToPort: "2202"
          CidrIp: 130.108.0.0/16 # WSU CIDR
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SSHLocation
        # SSH port forward for httpd-* instances
        - IpProtocol: tcp
          FromPort: "2201"
          ToPort: "2202"
          CidrIp: !Ref SSHLocation
        # HTTP/HTTPS public access
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH and HTTP access between all members
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 10.0.0.0/24
  # This defines one instance.  Make two more instances based on this (but no elastic IP)
  PublicInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap
        - AWSRegionUbuntu
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: proxy
        - Key: Application
          Value: !Ref "AWS::StackId"
      NetworkInterfaces:
        - GroupSet:
            - !Ref PublicSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.8 # EC Private ip 15 or lower and higher than 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Run common init script
          sh -c "$(curl -fsSL ${RepoUrl}/files/init-script.sh)"

          # Set hostname
          hostnamectl set-hostname proj5-proxy

          # Install specific packages
          apt install -y haproxy nftables

          # Configure haproxy
          curl -fsSL ${RepoUrl}/files/haproxy.cfg.append >> /etc/haproxy/haproxy.cfg

          # Enable and configure port forwarding
          echo "net.ipv4.forwarding = 1
          net.ipv4.conf.eth0.forwarding = 1
          " >> /etc/sysctl.conf
          systemctl enable nftables.service
          curl -fsSL ${RepoUrl}/files/nftables.conf > /etc/nftables.conf

          # Close out with reboot
          reboot
  Httpd1Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap
        - AWSRegionUbuntu
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: httpd-1
        - Key: Application
          Value: !Ref "AWS::StackId"
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.11 # make sure unique to the instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Run common init script
          sh -c "$(curl -fsSL ${RepoUrl}/files/init-script.sh)"

          # Set hostname
          hostnamectl set-hostname httpd-1

          # Install web server and index file
          apt install -y nginx
          curl -fsSL ${RepoUrl}/www/index1.html > /var/www/html/index.html

          # Close out with reboot
          reboot
  Httpd2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap
        - AWSRegionUbuntu
        - !Ref "AWS::Region"
        - !FindInMap
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: httpd-2
        - Key: Application
          Value: !Ref "AWS::StackId"
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.12 # make sure unique to the instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Run common init script
          sh -c "$(curl -fsSL ${RepoUrl}/files/init-script.sh)"

          # Set hostname
          hostnamectl set-hostname httpd-2

          # Install web server and index file
          apt install -y nginx
          curl -fsSL ${RepoUrl}/www/index2.html > /var/www/html/index.html

          # Close out with reboot
          reboot
